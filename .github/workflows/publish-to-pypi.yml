name: Publish Package and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: pip install build twine bump2version

    - name: Configure Git user
      run: |
        git config --global user.email "github-actions@github.com"
        git config --global user.name "GitHub Actions"

    - name: Determine Version Type
      id: version_type
      run: |
        if [[ "${{ github.event.head_commit.message }}" =~ "[major]" ]]; then
          echo "version_type=major" >> $GITHUB_ENV
        elif [[ "${{ github.event.head_commit.message }}" =~ "[minor]" ]]; then
          echo "version_type=minor" >> $GITHUB_ENV
        else
          echo "version_type=patch" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Find next available tag
      id: find_tag
      run: |
        found_free_version=false
        while [[ "$found_free_version" == "false" ]]; do
          TAG_NAME=v$(python -c "import mylibrary.version as v; print(v.__version__)")
          echo "Checking for tag: $TAG_NAME"
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists, bumping version."
            bump2version ${{ env.version_type }} --allow-dirty --list
            git commit -m "Bump version"
          else
            echo "Tag $TAG_NAME is free."
            found_free_version=true
          fi
        done

    - name: Bump version, create tag, and push to GitHub
      id: bump_version
      run: |
        git push origin --tags
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build the package using `build`
      run: |
        python -m build

    - name: Publish to PyPI
      run: |
        twine upload dist/*
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.bump_version.outputs.new_version }}  # Tag with the bumped version
        release_name: Release ${{ steps.bump_version.outputs.new_version }}  # Release name
        draft: false
        prerelease: false

    - name: Upload Assets to GitHub Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/*.tar.gz
        asset_name: riscflow-${{ steps.bump_version.outputs.new_version }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Wheel to GitHub Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/*.whl
        asset_name: riscflow-${{ steps.bump_version.outputs.new_version }}.whl
        asset_content_type: application/octet-stream
