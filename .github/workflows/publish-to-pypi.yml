name: Release on Main

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install bump2version build twine

      - name: Configure Git user
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Determine Version Type
        id: version_type
        run: |
          if [[ "${{ github.event.head_commit.message }}" =~ "[major]" ]]; then
            echo "version_type=major" >> $GITHUB_ENV
          elif [[ "${{ github.event.head_commit.message }}" =~ "[minor]" ]]; then
            echo "version_type=minor" >> $GITHUB_ENV
          else
            echo "version_type=patch" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Bump version
        id: bump_version
        run: |
          bump2version ${{ env.version_type }} --allow-dirty --list | tee version_output.txt

          # Extract the new version
          NEW_VERSION=$(grep -oP '(?<=new_version=)\S+' version_output.txt)
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

          # Commit the version bump and push the changes to the main branch
          git commit -am "Bump version to $NEW_VERSION"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build the package
        run: |
          python -m build

      - name: Publish to PyPI
        run: |
          twine upload dist/*
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

      - name: Prepare release artifacts
        run: |
          # Create a tarball with build artifacts
          tar -czvf release.tar.gz dist/*.tar.gz dist/*.whl

      - name: Create a Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ env.new_version }}            # Tag with the new version
          name: Release v${{ env.new_version }}   # Release name with the new version
          artifacts: "release.tar.gz,dist/*.tar.gz,dist/*.whl"   # Specify the artifacts to upload
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Push version tag to GitHub
        run: |
          git tag v${{ env.new_version }}
          git push origin v${{ env.new_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
