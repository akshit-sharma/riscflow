name: Publish Python Package and Create GitHub Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: pip install build twine bump2version

    - name: Bump version and tag
      id: bump_version
      run: |
        # Bump the version, create a new tag, and push it to GitHub
        bump2version patch --allow-dirty --list
        git push origin --tags
        echo "Version bumped to ${{ steps.bump_version.outputs.new_version }}"

    - name: Build the package using `build`
      run: |
        python -m build

    - name: Publish to PyPI
      run: |
        twine upload dist/*
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # This is automatically provided by GitHub Actions
      with:
        tag_name: v${{ steps.bump_version.outputs.new_version }}  # Tag with the bumped version
        release_name: Release ${{ steps.bump_version.outputs.new_version }}  # Release name
        draft: false  # Set to true if you want to manually publish it later
        prerelease: false

    - name: Upload Assets to GitHub Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}  # Use the upload URL from the created release
        asset_path: dist/*.tar.gz  # Path to the .tar.gz file
        asset_name: mylibrary-${{ steps.bump_version.outputs.new_version }}.tar.gz  # Name of the asset
        asset_content_type: application/gzip

    - name: Upload Wheel to GitHub Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}  # Use the upload URL from the created release
        asset_path: dist/*.whl  # Path to the .whl file
        asset_name: mylibrary-${{ steps.bump_version.outputs.new_version }}.whl  # Name of the asset
        asset_content_type: application/octet-stream
